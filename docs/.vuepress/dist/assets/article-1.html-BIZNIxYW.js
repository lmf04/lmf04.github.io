import{_ as s,e as a,g as e,o as p}from"./app-yQRFVPrG.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>以下是整理后的 Markdown 格式内容：</p><h2 id="with-的引入与作用" tabindex="-1"><a class="header-anchor" href="#with-的引入与作用"><span><code>with</code> 的引入与作用</span></a></h2><p>在 Python 2.5 中，<code>with</code> 关键字被引入，用于简化常见的 <code>try ... except ... finally ...</code> 模式。它允许我们将资源管理（如文件、数据库事务等）封装为上下文管理器，从而确保资源在使用后被正确释放。</p><h3 id="经典示例-文件操作" tabindex="-1"><a class="header-anchor" href="#经典示例-文件操作"><span>经典示例：文件操作</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，无论 <code>with</code> 块中是否发生异常，文件最终都会被关闭。如果块中发生异常，异常会在文件关闭后抛出。</p><h3 id="数据库事务示例" tabindex="-1"><a class="header-anchor" href="#数据库事务示例"><span>数据库事务示例</span></a></h3><p>传统的数据库事务代码通常如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">db<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 执行一些操作</span></span>
<span class="line"><span class="token keyword">except</span><span class="token punctuation">:</span></span>
<span class="line">    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">raise</span></span>
<span class="line"><span class="token keyword">finally</span><span class="token punctuation">:</span></span>
<span class="line">    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用支持 <code>with</code> 的上下文管理器，代码可以简化为：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">with</span> transaction<span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 执行一些操作</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="with-的执行过程" tabindex="-1"><a class="header-anchor" href="#with-的执行过程"><span><code>with</code> 的执行过程</span></a></h2><p><code>with</code> 表达式的基本结构如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">with</span> EXPR <span class="token keyword">as</span> VAR<span class="token punctuation">:</span></span>
<span class="line">    BLOCK</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>EXPR</code> 是任意表达式，返回一个上下文管理器。</li><li><code>as VAR</code> 是可选的，用于接收上下文管理器的返回值。</li></ul><h3 id="执行步骤" tabindex="-1"><a class="header-anchor" href="#执行步骤"><span>执行步骤</span></a></h3><ol><li><strong>计算表达式</strong>：计算 <code>EXPR</code>，获取一个上下文管理器。</li><li><strong>保存退出方法</strong>：将上下文管理器的 <code>__exit__</code> 方法保存起来。</li><li><strong>调用 <code>__enter__</code> 方法</strong>：执行上下文管理器的 <code>__enter__</code> 方法。</li><li><strong>赋值变量</strong>：如果 <code>with</code> 表达式包含 <code>as VAR</code>，则将 <code>EXPR</code> 的返回值赋值给 <code>VAR</code>。</li><li><strong>执行块代码</strong>：执行 <code>BLOCK</code> 中的代码。</li><li><strong>调用 <code>__exit__</code> 方法</strong>：无论 <code>BLOCK</code> 是否发生异常，都会调用 <code>__exit__</code> 方法。如果发生异常，异常的类型、值和 traceback 将作为参数传递给 <code>__exit__</code> 方法；否则传递三个 <code>None</code>。</li></ol><p>用伪代码表示如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">mgr <span class="token operator">=</span> EXPR</span>
<span class="line">exit <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">.</span>__exit__</span>
<span class="line">value <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">.</span>__enter__<span class="token punctuation">(</span>mgr<span class="token punctuation">)</span></span>
<span class="line">exc <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        VAR <span class="token operator">=</span> value  <span class="token comment"># 如果有 as VAR</span></span>
<span class="line">        BLOCK</span>
<span class="line">    <span class="token keyword">except</span><span class="token punctuation">:</span></span>
<span class="line">        exc <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">not</span> exit<span class="token punctuation">(</span>mgr<span class="token punctuation">,</span> <span class="token operator">*</span>sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">raise</span></span>
<span class="line"><span class="token keyword">finally</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> exc<span class="token punctuation">:</span></span>
<span class="line">        exit<span class="token punctuation">(</span>mgr<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键细节" tabindex="-1"><a class="header-anchor" href="#关键细节"><span>关键细节</span></a></h3><ul><li>如果上下文管理器缺少 <code>__enter__</code> 或 <code>__exit__</code> 方法，解释器会抛出 <code>AttributeError</code>。</li><li>如果 <code>BLOCK</code> 中发生异常，<code>__exit__</code> 方法返回 <code>True</code> 时，异常不会被抛出，后续代码会继续执行。</li></ul><h2 id="实现上下文管理器的两种方式" tabindex="-1"><a class="header-anchor" href="#实现上下文管理器的两种方式"><span>实现上下文管理器的两种方式</span></a></h2><h3 id="方法-1-实现上下文管理器类" tabindex="-1"><a class="header-anchor" href="#方法-1-实现上下文管理器类"><span>方法 1：实现上下文管理器类</span></a></h3><p>通过实现一个类并定义 <code>__enter__</code> 和 <code>__exit__</code> 方法，可以创建支持 <code>with</code> 的上下文管理器。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">transaction</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>db <span class="token operator">=</span> db</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法-2-使用生成器装饰器" tabindex="-1"><a class="header-anchor" href="#方法-2-使用生成器装饰器"><span>方法 2：使用生成器装饰器</span></a></h3><p>Python 标准库中的 <code>contextlib.contextmanager</code> 装饰器可以通过生成器实现上下文管理器。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@contextmanager</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">transaction</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    db<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span> db</span>
<span class="line">    <span class="token keyword">except</span><span class="token punctuation">:</span></span>
<span class="line">        db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">raise</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程"><span>执行过程</span></a></h4><ol><li><code>contextmanager</code> 装饰器将生成器函数包装为一个帮助函数。</li><li><code>with</code> 表达式调用 <code>transaction(db)</code>，实际上是调用帮助函数。</li><li>帮助函数创建一个 <code>GeneratorContextManager</code> 实例作为上下文管理器。</li><li>调用 <code>__enter__</code> 方法时，生成器执行到 <code>yield</code> 处暂停，并返回 <code>yield</code> 的值。</li><li><code>BLOCK</code> 执行结束后，调用 <code>__exit__</code> 方法，继续执行生成器的剩余代码。</li></ol><h2 id="示例-锁机制与标准输出重定向" tabindex="-1"><a class="header-anchor" href="#示例-锁机制与标准输出重定向"><span>示例：锁机制与标准输出重定向</span></a></h2><h3 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span>锁机制</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token decorator annotation punctuation">@contextmanager</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">locked</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span></span>
<span class="line">    <span class="token keyword">finally</span><span class="token punctuation">:</span></span>
<span class="line">        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准输出重定向" tabindex="-1"><a class="header-anchor" href="#标准输出重定向"><span>标准输出重定向</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token decorator annotation punctuation">@contextmanager</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">stdout_redirect</span><span class="token punctuation">(</span>new_stdout<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    old_stdout <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdout</span>
<span class="line">    sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> new_stdout</span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">yield</span></span>
<span class="line">    <span class="token keyword">finally</span><span class="token punctuation">:</span></span>
<span class="line">        sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> old_stdout</span>
<span class="line"></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">with</span> stdout_redirect<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Python 的 <code>with</code> 表达式结合了生成器、装饰器和异常处理等特性，是一种非常强大的工具。理解其工作原理并灵活应用，可以显著提高代码的可读性和健壮性。</p>`,38)]))}const o=s(t,[["render",l],["__file","article-1.html.vue"]]),d=JSON.parse(`{"path":"/zh/blog/article-1.html","title":"Python 中的with关键字使用详解","lang":"zh-CN","frontmatter":{"layout":"BlogPost","date":"2025.01.12","archive":true,"title":"Python 中的with关键字使用详解","category":["python学习"],"description":"在 Python 2.5 中， with 关键字被加入。它将常用的 try ... except ... finally ... 模式很方便的被复用。"},"headers":[{"level":2,"title":"with 的引入与作用","slug":"with-的引入与作用","link":"#with-的引入与作用","children":[{"level":3,"title":"经典示例：文件操作","slug":"经典示例-文件操作","link":"#经典示例-文件操作","children":[]},{"level":3,"title":"数据库事务示例","slug":"数据库事务示例","link":"#数据库事务示例","children":[]}]},{"level":2,"title":"with 的执行过程","slug":"with-的执行过程","link":"#with-的执行过程","children":[{"level":3,"title":"执行步骤","slug":"执行步骤","link":"#执行步骤","children":[]},{"level":3,"title":"关键细节","slug":"关键细节","link":"#关键细节","children":[]}]},{"level":2,"title":"实现上下文管理器的两种方式","slug":"实现上下文管理器的两种方式","link":"#实现上下文管理器的两种方式","children":[{"level":3,"title":"方法 1：实现上下文管理器类","slug":"方法-1-实现上下文管理器类","link":"#方法-1-实现上下文管理器类","children":[]},{"level":3,"title":"方法 2：使用生成器装饰器","slug":"方法-2-使用生成器装饰器","link":"#方法-2-使用生成器装饰器","children":[]}]},{"level":2,"title":"示例：锁机制与标准输出重定向","slug":"示例-锁机制与标准输出重定向","link":"#示例-锁机制与标准输出重定向","children":[{"level":3,"title":"锁机制","slug":"锁机制","link":"#锁机制","children":[]},{"level":3,"title":"标准输出重定向","slug":"标准输出重定向","link":"#标准输出重定向","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1743165624000,"contributors":[{"name":"2935580139@qq.com","username":"2935580139@qq.com","email":"2935580139@qq.com","commits":5,"url":"https://github.com/2935580139@qq.com"}],"changelog":[{"hash":"28bfb9017a2e48bcd8b5316438b626ecbcd466f4","time":1743165624000,"email":"2935580139@qq.com","author":"2935580139@qq.com","message":"1"},{"hash":"7763b45c3673498908f0e2e9f92b15285d3f11d2","time":1743156666000,"email":"2935580139@qq.com","author":"2935580139@qq.com","message":"23234"},{"hash":"111f99791fc859f6161c5bc6e170c49ba8d87c0a","time":1741935172000,"email":"2935580139@qq.com","author":"2935580139@qq.com","message":"123"},{"hash":"0067cd900b57c2d5d286d793fd090266ceea4952","time":1741880611000,"email":"2935580139@qq.com","author":"2935580139@qq.com","message":"1"},{"hash":"2de90227ea5bda0ed1f22282a8f3f3289e48a111","time":1741848364000,"email":"2935580139@qq.com","author":"2935580139@qq.com","message":"init"}]},"filePathRelative":"zh/blog/article-1.md","excerpt":"<p>以下是整理后的 Markdown 格式内容：</p>\\n<h2><code>with</code> 的引入与作用</h2>\\n<p>在 Python 2.5 中，<code>with</code> 关键字被引入，用于简化常见的 <code>try ... except ... finally ...</code> 模式。它允许我们将资源管理（如文件、数据库事务等）封装为上下文管理器，从而确保资源在使用后被正确释放。</p>\\n<h3>经典示例：文件操作</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"py\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'file.txt'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> f<span class=\\"token punctuation\\">:</span></span>\\n<span class=\\"line\\">    content <span class=\\"token operator\\">=</span> f<span class=\\"token punctuation\\">.</span>read<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{o as comp,d as data};
